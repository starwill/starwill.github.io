<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿星的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://starwill.github.io/"/>
  <updated>2017-03-29T07:52:02.056Z</updated>
  <id>https://starwill.github.io/</id>
  
  <author>
    <name>Starwill</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>项目实训总结</title>
    <link href="https://starwill.github.io/2017/03/25/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E6%80%BB%E7%BB%93/"/>
    <id>https://starwill.github.io/2017/03/25/项目实训总结/</id>
    <published>2017-03-25T12:11:15.000Z</published>
    <updated>2017-03-29T07:52:02.056Z</updated>
    
    <content type="html"><![CDATA[<p><code>刚开始这个项目的时候满怀信心的想要整完一个完完整整属于自己的web程序和Android程序，争取做到web和Android开发有一个全面详细的认识。同时也为后面的实习打下一定的基础，可惜想象终究是抵不过现实的残酷呀。最后还是通过各种捷径完成了自己的项目。不过尽管收获不多，还是得记下来。毕竟都是一番心血，也有一定的团队合作开发的经验了。</code></p>
<h3 id="团队经历"><a href="#团队经历" class="headerlink" title="团队经历"></a>团队经历</h3><p><strong>软件工程开发最重要的是：团队合作</strong><br>团队组建的过程是一个随机的过程，每个人选定项目之后自动划分为一组，可能是因为我们题目“校园社交管理应用系统”这个题目相对于其他应用的题目稍微Low了一点，于是我们初始分配的时候只有三个人。不过后来又加进来两个组员。<br>按老师培训设定的 <strong>Scrum团队模式</strong> 以及 <strong>敏捷开发</strong> 的方式正式开始项目的开发。作为软件工程的学生对于敏捷开发这种概念肯定是耳熟能详的。不过定义是定义，只有真正经历过才算稍微理解了一下敏捷开发的过程。首先Scrum团队分为：项目经理（Master），产品经理（PO），技术总监（因为人数原因所有人都作为技术人员），机缘巧合我担任本次项目的项目经理。本来抱着实训的带有一定的游戏心态看待这次的任务分配。不过随着项目的逐渐深入我慢慢地明白了<code>一个项目的开发，最重要的真不是技术，而是管理，管理的目的是什么，那就是合作。</code>在软件工程这个领域，除去一些特别妖孽的存在，个人的力量永远都没有一个团队的力量大。<br>这里粗略的过一下开发流程：  </p>
<ul>
<li>第一周的项目培训，我参与的是Android班的项目培训，大体上将一个Android开发所需要的基础知识过了一遍，如Java基础、Activity模式、监听器、Service、线程及handler、Adapter、SQLite及preference的应用、Web通信等知识，每天都有相对应的作业。而JavaWeb端的培训没有时间参与培训，大体上也知道那边的培训重点是JavaSript和sql语句。简单的基础过完之后就正式进入项目的开发了。</li>
<li>剩下四周就正式进入开发流程了，我们采用Scrum团队敏捷开发模式。简单地叙述一下这次的开发流程吧：首先一些必要文档，团队创建报告-项目风险分析报告-产品待办列表（总需求）-产品总需求用例图-基于墨刀创建产品原型-每周sprint待办列表及产品用例图-缺陷追踪表-演示ppt。当然还有master额外任务-项目经理日报。其实这些文档相对于正常软件开发流程中的每个阶段所对应的文档来说还是挺少的。接下来就是进入重复式的开发模式：每日站会（汇报工作进度及布置任务）-开发-每日项目经理会议。</li>
<li>以上是关于这次项目实训公版流程的介绍，至于我们组的项目还是经历了近一个星期的波折才正式进入开发阶段。首先是解决客户端与服务器端的交互问题，这个问题我花了一天时间。然后关于项目的模板问题，找了很多网上的开源代码结果都不是非常的很好，最后得到同学的指点，采用最近相对较火的开源代码网易云信SDK。这个我们花了3天时间。然后自我研发阶段，本来我的想法是自己基于别人的sdk从头开发一个属于自己的app，可惜关于网易云信sdk的运用太过繁杂以及他们服务器端数据的交互无法彻底搞明白，于是又花费2天时间决定基于人家第一个版本的demo进行开发。就这样经过一个星期的挣扎摸索终于正式决定研发方向，然后就是看代码-改代码-添加自己的功能。。。</li>
</ul>
<h6 id="感想："><a href="#感想：" class="headerlink" title="感想："></a>感想：</h6><ol>
<li>想象终究是美好的，只有正式经历过一次开发流程才知道软件开发的难度在哪。</li>
<li>没有完全的走一遍开发流程，首先是因为技术不够，还有就是难度过高，当然最终要是没有完善的管理，如果在项目刚开始的时候就已经把所有可能遇到的技术难点给列出来然后决定好开发方向，至少可以节省5天的时间。<br>3.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;刚开始这个项目的时候满怀信心的想要整完一个完完整整属于自己的web程序和Android程序，争取做到web和Android开发有一个全面详细的认识。同时也为后面的实习打下一定的基础，可惜想象终究是抵不过现实的残酷呀。最后还是通过各种捷径完成了自己的项目。不过尽管
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://starwill.github.io/tags/JavaWeb/"/>
    
      <category term="Android" scheme="https://starwill.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>回调函数的个人理解</title>
    <link href="https://starwill.github.io/2017/03/12/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    <id>https://starwill.github.io/2017/03/12/回调函数的个人理解/</id>
    <published>2017-03-12T09:41:48.000Z</published>
    <updated>2017-03-29T07:53:24.726Z</updated>
    
    <content type="html"><![CDATA[<p>首先推荐一下知乎里大神们的回答<a href="https://www.zhihu.com/people/qiao.zhang" target="_blank" rel="external">回调函数是什么（callback）</a>，我是看了排名第二的大神回答才算初步搞懂回调函数。<br>下面来说下个人理解：  </p>
<ul>
<li>“回调”：首先得有关于回调的概念，将抽象概念具象化的话就是像知乎中得赞最高的那个例子，顾客预留一个电话号码，等到后面有触发事件的时候调用这个电话号码。那么这个过程及时回调。这里先清除几个概念<br>1、中间函数：调用回调函数的函数<br>2、回调函数：被调用的函数<br>3、起始函数：中间函数的调用者，一般是主函数  </li>
<li>好的，这样看来回调也就是函数调用函数的过程，形式上的确差不多，不过相比起来回调当然有自己的优点的，那就是： <strong>动态</strong>，怎么理解这个动态呢？<br>首先形式上回调函数是以参数的形式传给中间函数的。在C++上是以函数指针的形式传入，在Java中则通过实现创建接口对象的形式多态地传入回调函数。也就是说，只有在回调函数实例化后中间函数才可以完整执行的。<br>然后下面该做的就是用户自定义自己的回调函数了。下面举例：    </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">//计算矩形面积</div><div class="line">public double rectangle(double a,double b)&#123;</div><div class="line">  return a*b;</div><div class="line">&#125;</div><div class="line">//计算三角形面积</div><div class="line">public double triangle(double a,double b)&#123;</div><div class="line">  return 1/2*a*b;</div><div class="line">&#125;</div><div class="line">//定义函数指针作为回调函数</div><div class="line">public double (&amp;lowast;p)(double a,double b);</div><div class="line"></div><div class="line">//作为中间函数调用回调函数,用来输出面积</div><div class="line">public void area(double a,double b,(&amp;lowast;p)(double a,double b))&#123;</div><div class="line">  std:cout&lt;&lt;&quot;the area is: &quot;&lt;&lt;p(a,b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//main()函数，也就是起始函数，中间函数的调用者</div><div class="line">public static void main()&#123;</div><div class="line">  double a=1.2,b=2.1;</div><div class="line"></div><div class="line">  //输出长方形面积</div><div class="line">  p=rectangle(double a,double b);</div><div class="line">  area(a,b,p);</div><div class="line"></div><div class="line">  //输出三角形面积</div><div class="line">  p=triangle(double a,double b);</div><div class="line">  area(a,b,p);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后做个总结：形式上回调是函数调用函数的过程，而回调函数与普通函数的区别是，普通函数的调用时在函数体中直接调用，是一个明确目标的调用过程，中间函数可直接运行。而回调函数则是作为参数传入中间函数中，在该参数没有被动态地实例化之前，中间函数是不完整的即无法执行。<br>当然，知乎中关于回调还有更多更深层次的解释，这个专业知识储备还有所不足等以后能看懂人家的专业术语再去理解吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先推荐一下知乎里大神们的回答&lt;a href=&quot;https://www.zhihu.com/people/qiao.zhang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;回调函数是什么（callback）&lt;/a&gt;，我是看了排名第二的大神回答才算初步搞懂
    
    </summary>
    
    
      <category term="callback" scheme="https://starwill.github.io/tags/callback/"/>
    
  </entry>
  
  <entry>
    <title>AS的R文件丢失异常</title>
    <link href="https://starwill.github.io/2017/03/01/AS%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://starwill.github.io/2017/03/01/AS一个错误的解决办法/</id>
    <published>2017-03-01T05:52:39.000Z</published>
    <updated>2017-03-12T09:43:14.644Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始项目实训，正踌躇满志的时候给我来个一天也没解决的bug，项目中没有报错，可是不管clean还是rebuild都无法找回丢失的R文件，错误如下：</p>
<pre><code>Error:Execution failed for task &apos;:app:mergeDebugResources&apos;.
&gt; Error: java.util.concurrent.ExecutionException: com.android.ide.common.process.ProcessException:
</code></pre><p>这里不说废话，解决方法如下：在app的.gradle中加入下面这两句话：<br><img src="http://oi63esxp7.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170301140411.png" alt=""><br>百度了一下这两句话主要作用是关闭.png图片的合法性检查，想了下遇到过两次这种错误的确导入过别人的drawable资源。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始项目实训，正踌躇满志的时候给我来个一天也没解决的bug，项目中没有报错，可是不管clean还是rebuild都无法找回丢失的R文件，错误如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error:Execution failed for task &amp;apos;:app:mer
    
    </summary>
    
    
      <category term="Android_Studio" scheme="https://starwill.github.io/tags/Android-Studio/"/>
    
      <category term="Debug" scheme="https://starwill.github.io/tags/Debug/"/>
    
      <category term="Error" scheme="https://starwill.github.io/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习笔记（一）</title>
    <link href="https://starwill.github.io/2017/01/23/JavaWeb%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <id>https://starwill.github.io/2017/01/23/JavaWeb开发学习心得/</id>
    <published>2017-01-22T16:00:00.000Z</published>
    <updated>2017-03-01T10:55:14.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-HTML基础"><a href="#一-HTML基础" class="headerlink" title="一.HTML基础"></a>一.HTML基础</h1><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="1-文本控制标签"><a href="#1-文本控制标签" class="headerlink" title="1.文本控制标签"></a>1.文本控制标签</h3><p><code>&lt;p&gt;&lt;/p&gt;</code>  ：段落<br><code>&lt;br/&gt;</code>：（break row）换行<br><code>&lt;hr/&gt;</code>：创建水平线<br><code>&lt;h1&gt;&lt;/h1&gt;~&lt;h6&gt;&lt;/h6&gt;</code>：标题  </p>
<h3 id="2-表格相关标签"><a href="#2-表格相关标签" class="headerlink" title="2.表格相关标签"></a>2.表格相关标签</h3><p><code>&lt;table&gt;&lt;/table&gt;</code>：常用属性有两个<br><strong>align</strong>（对齐，取值为left、center、right）<br><strong>border</strong>（表格边框大小，取值为数字，如border=”1”）<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-HTML基础&quot;&gt;&lt;a href=&quot;#一-HTML基础&quot; class=&quot;headerlink&quot; title=&quot;一.HTML基础&quot;&gt;&lt;/a&gt;一.HTML基础&lt;/h1&gt;&lt;h2 id=&quot;常用标签&quot;&gt;&lt;a href=&quot;#常用标签&quot; class=&quot;headerlink&quot; title=&quot;常用标签&quot;&gt;&lt;/a&gt;常用标签&lt;/h2&gt;&lt;h3 id=&quot;1-文本控制标签&quot;&gt;&lt;a href=&quot;#1-文本控制标签&quot; class=&quot;headerlink&quot; title=&quot;1.文本控制标签&quot;&gt;&lt;/a&gt;1.文本控制标签&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;  ：段落&lt;br&gt;&lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;：（break row）换行&lt;br&gt;&lt;code&gt;&amp;lt;hr/&amp;gt;&lt;/code&gt;：创建水平线&lt;br&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;~&amp;lt;h6&amp;gt;&amp;lt;/h6&amp;gt;&lt;/code&gt;：标题  &lt;/p&gt;
&lt;h3 id=&quot;2-表格相关标签&quot;&gt;&lt;a href=&quot;#2-表格相关标签&quot; class=&quot;headerlink&quot; title=&quot;2.表格相关标签&quot;&gt;&lt;/a&gt;2.表格相关标签&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;table&amp;gt;&amp;lt;/table&amp;gt;&lt;/code&gt;：常用属性有两个&lt;br&gt;&lt;strong&gt;align&lt;/strong&gt;（对齐，取值为left、center、right）&lt;br&gt;&lt;strong&gt;border&lt;/strong&gt;（表格边框大小，取值为数字，如border=”1”）&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://starwill.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub个人博客的搭建及使用</title>
    <link href="https://starwill.github.io/2017/01/21/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://starwill.github.io/2017/01/21/Hexo+GitHub搭建个人博客/</id>
    <published>2017-01-20T16:00:00.000Z</published>
    <updated>2017-03-01T10:55:31.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h3><p><a href="https://hexo.io/" target="_blank" rel="external">hexo</a>是一款基于Node.js的静态博客框架。不过我用起来更像是一个在Git上发布博客的工具。目前在GitHub上已有14043 star 和 2191 fork  </p>
<h3 id="那么，什么又是Node-js"><a href="#那么，什么又是Node-js" class="headerlink" title="那么，什么又是Node.js?"></a>那么，什么又是Node.js?</h3><p>在这篇文章里又关于Node.js的详细叙述<a href="http://www.ibm.com/developerworks/cn/opensource/os-nodejs/" target="_blank" rel="external">Node.js究竟是什么？</a>，不过对于还没入门的来说比较深奥，我个人理解就是JavaScript的运行环境了。<br><a id="more"></a></p>
<h3 id="什么是GitHub-Page？"><a href="#什么是GitHub-Page？" class="headerlink" title="什么是GitHub Page？"></a>什么是GitHub Page？</h3><p><a href="https://github.com/blog/272-github-pages" target="_blank" rel="external">GitHub Page</a>官方文档的介绍有这么一段话：<br><code>If you create a repository named you.github.com, where you is your username, and push content to it, we’ll automatically publish that to http://you.github.com. No FTP, no scp, no rsync, nothing. Just a simple git push and you’re done. You can put anything here you like. Use it as a customizable home for your Git repos. Create a blog and spread your ideas. Whatever you want!</code><br>那么我认为GitHub Page就是一个特殊容器，该容器的内容会自动显示在 http：//you.github.com 上。  </p>
<h3 id="搭建一个GitHub-Hexo博客过程"><a href="#搭建一个GitHub-Hexo博客过程" class="headerlink" title="搭建一个GitHub+Hexo博客过程"></a>搭建一个GitHub+Hexo博客过程</h3><p>首先推荐这个博客<a href="http://www.tuicool.com/articles/ueI7naV" target="_blank" rel="external">简洁轻便的博客平台: Hexo详解</a>，特详细，我这个只是自我总结</p>
<ol>
<li>第一步自然是安装Node.js。这里直接官网下载安装就好。</li>
<li><code>npm install -g hexo-cli</code>//全局安装hexo</li>
<li><code>hexo init &lt;folder&gt;</code><br><code>npm install</code><br>//会在当前目录创建一个folder并且在此初始化hexo，关于初始化后的目录结构以及功能在官方文档<a href="https://hexo.io/docs/setup.html" target="_blank" rel="external">hexo</a>里都有介绍，我觉得需要耐下心来观看</li>
<li>安装插件(这几个插件不是很懂)：<br><code>npm install npm install hexo-deployer-git --save</code>//hexo d部署到git插件<br><code>npm install hexo-generator-feed --save</code>  //RSS订阅插件<br><code>npm install hexo-generator-sitemap --save</code> //站点地图插件</li>
<li><code>hexo server</code>//这时候可以启动hexo服务器查看运行效果，不过得切换到hexo得安装目录下运行。  </li>
</ol>
<p>ps：将hexo迁移到其他电脑上的过程和搭建的过程类似，不过因为是将hexo文件夹复制到新电脑，所以忽略<code>hexo init &lt;folder&gt;</code>这个命令就好。</p>
<h3 id="主题基本设置"><a href="#主题基本设置" class="headerlink" title="主题基本设置"></a>主题基本设置</h3><p>首先要在hexo的安装目录下更改_config.yml全局配置文件，需要更改的属性不多。示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">title: 阿星的博客</div><div class="line">subtitle:</div><div class="line">description:</div><div class="line">author: Starwill</div><div class="line">language: zh-Hans</div><div class="line">timezone: Asia/Shanghai</div><div class="line"></div><div class="line">theme: hexo-theme-next//这里配置使用主题</div><div class="line"></div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:starwill/starwill.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>其次就是选择主题了，官方主题给的是landscape，不过为了体现GitHub自定义博客与其他博客的不同（装个XX），大部分人还是选择一些民间大神自定义的主题。这里推荐两款主题：<a href="https://github.com/forsigner/fexo" target="_blank" rel="external">fexo</a>和<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>，NexT主题是使用人数最多的，这个配置只需要严格按照官方文档设置就行 <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">next使用文档</a>.(注：千万不要瞎删东西，不过删了也可以通过git找回)</p>
<h3 id="初步使用！！！！"><a href="#初步使用！！！！" class="headerlink" title="初步使用！！！！"></a>初步使用！！！！</h3><p>这个狂想吐槽！！！！（当你deploy过后有的链接如分类关于这样的点开后显示404，那么，并不是主题部署出错啊啊啊！为这个我换了NNN个主题！！）<br>hexo的目录基本使用只需要看scaffolds（模板目录）、source（资源目录，存放文章和分类标签之类的文件夹）。  </p>
<p>首先需要建立About、Categories、tags页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;about&quot;</div><div class="line">hexo new page &quot;catetories&quot;</div><div class="line">hexo new page &quot;tags&quot;</div></pre></td></tr></table></figure></p>
<p>这样source文件夹下就有了三个about、catetories、tags命名的文件夹以及各自的index页面。当然最后还要在主题配置文件里面的menu一下添加url如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories</div><div class="line">  about: /about</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div></pre></td></tr></table></figure></p>
<p>然后下面关于写文章就比较简单了。<br>创建一篇文章，<br><code>hexo new [layout] &quot;title&quot;</code>这里的layout是scaffolds文件夹下的三个模板，省略的话就会自动选择post模板，为了方便博客的编写，我们可以将模板改成下面这种形式：</p>
<pre><code class="---">title: {{ title }}
date: {{ date }}  
catetories:
tags: [GitHub,Hexo]
---
</code></pre>
<p>注意如果tags有多个的话需要加[]。显示一部分内容需要在分割线下加<!--more-->。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Hexo？&quot;&gt;&lt;a href=&quot;#什么是Hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是Hexo？&quot;&gt;&lt;/a&gt;什么是Hexo？&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/&quot;&gt;hexo&lt;/a&gt;是一款基于Node.js的静态博客框架。不过我用起来更像是一个在Git上发布博客的工具。目前在GitHub上已有14043 star 和 2191 fork  &lt;/p&gt;
&lt;h3 id=&quot;那么，什么又是Node-js&quot;&gt;&lt;a href=&quot;#那么，什么又是Node-js&quot; class=&quot;headerlink&quot; title=&quot;那么，什么又是Node.js?&quot;&gt;&lt;/a&gt;那么，什么又是Node.js?&lt;/h3&gt;&lt;p&gt;在这篇文章里又关于Node.js的详细叙述&lt;a href=&quot;http://www.ibm.com/developerworks/cn/opensource/os-nodejs/&quot;&gt;Node.js究竟是什么？&lt;/a&gt;，不过对于还没入门的来说比较深奥，我个人理解就是JavaScript的运行环境了。&lt;br&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="https://starwill.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://starwill.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="https://starwill.github.io/2017/01/16/git%E5%AD%A6%E4%B9%A0/"/>
    <id>https://starwill.github.io/2017/01/16/git学习/</id>
    <published>2017-01-15T16:00:00.000Z</published>
    <updated>2017-03-01T10:54:55.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git安装配置"><a href="#Git安装配置" class="headerlink" title="Git安装配置"></a>Git安装配置</h3><p>windows下安装直接下载<a href="https://www.git-scm.com/download/win" target="_blank" rel="external">Git</a>可执行文件，然后一键式安装就好。装好之后需要为你的机器设置一下名字和地址<br><code>git config --global user.name &quot;starwill&quot;</code><br><code>git config --global user.email &quot;email address&quot;</code><br>查看配置项：<code>git config -l</code><br><a id="more"></a></p>
<h3 id="创建版本库以及添加文件（repository）"><a href="#创建版本库以及添加文件（repository）" class="headerlink" title="创建版本库以及添加文件（repository）"></a>创建版本库以及添加文件（repository）</h3><ol>
<li>创建一个空目录即可  </li>
<li>cd进入该目录，通过<code>git init</code>即可变成仓库，目录下会多出<code>.git</code>文件夹，关于文件夹的作用可在  <a href="http://blog.csdn.net/u010331406/article/details/49128607" target="_blank" rel="external">.git文件夹详解</a>详细了解</li>
<li>关于添加文件，首先要新建或者更改一个已有文件。（只能跟踪文本文件，二进制文件无法跟踪。）然后通过一下命令：<br><code>git add readme.txt</code>//将添加或者修改文件提交的暂存区<br><code>git rm filename</code>//将删除操作提交到暂存区<br><code>git commit -m &quot;illustration&quot;</code>//将暂存区文件或操作提交到分支中，并说明<br><code>git status</code>//查看当前状态<br><code>git diff readme.txt</code>//查看修改的具体内容（只有在工作区和分支中文件不同时才会显示）</li>
<li>运行原理<br>将工作区文件修改一个个添加（add）到暂存区（stage）中，然后将暂存区中的内容一次性提交到分支中（master）<br><img src="http://oi63esxp7.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170116204102.png" alt=""></li>
</ol>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul>
<li><code>git log</code>//查看每次提交的历史，用于历史的回退</li>
<li><code>git reflog</code>//查看命令的历史，用于找回未来版本</li>
<li><code>git reset --hard head</code>//<strong>head</strong> 表示当前当前版本 <strong>head^</strong> 表示上一个版本 <strong>head~100</strong> 表示前100个版本 也可以直接加文件名</li>
<li><code>git checkout -- readme.txt</code>//丢弃工作区修改，也就是用版本库覆盖工作区的操作</li>
</ul>
<h3 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h3><p>分支的作用在于你不用一直在master分支上工作，确保你开发的代码不会影响到别人观看。<br>有关的分支命令：<br>查看分支：<code>git branch</code><br>创建分支:<code>git branch &lt;name&gt;</code><br>切换分支：<code>git checkout</code><br>创建+切换分支：<code>git checkout -b &lt;name&gt;</code><br>合并某分支到当前分支(master)：<code>git merge &lt;name&gt;</code><br>删除分支：<code>git branch -d &lt;name&gt;</code>  </p>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><ol>
<li><h6 id="生成ssh-key免密登录"><a href="#生成ssh-key免密登录" class="headerlink" title="生成ssh key免密登录"></a>生成ssh key免密登录</h6><code>ssh-keygen -t rsa -C &quot;youremail@..&quot;</code>//在gitbash中输入该命令，会在user/yourusername/.ssh 文件夹下生成 <strong>id_rsa</strong> 和 <strong>id_rsa.pub</strong> 两个文件，然后将pub文件copy到github中的SSH KEY中。  </li>
<li><h6 id="将本地分支与远程分支关联起来"><a href="#将本地分支与远程分支关联起来" class="headerlink" title="将本地分支与远程分支关联起来"></a>将本地分支与远程分支关联起来</h6>在GitHub上创建一个同名的版本库<br><code>git remote add origin git/github.com:starwill/test.git</code>//将本地仓库与远程仓库关联起来<br><code>git push -u origin master</code>//将本地内容推送到远程，第一次推送需要加<code>-u</code>，用于将本地master分支和远程master分支关联起来，以后的每次推送可以去掉。<br><code>git clone git/github.com:starwill/starwill.github.io</code>//将远程仓库clone到本地仓库</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Git安装配置&quot;&gt;&lt;a href=&quot;#Git安装配置&quot; class=&quot;headerlink&quot; title=&quot;Git安装配置&quot;&gt;&lt;/a&gt;Git安装配置&lt;/h3&gt;&lt;p&gt;windows下安装直接下载&lt;a href=&quot;https://www.git-scm.com/download/win&quot;&gt;Git&lt;/a&gt;可执行文件，然后一键式安装就好。装好之后需要为你的机器设置一下名字和地址&lt;br&gt;&lt;code&gt;git config --global user.name &amp;quot;starwill&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;code&gt;git config --global user.email &amp;quot;email address&amp;quot;&lt;/code&gt;&lt;br&gt;查看配置项：&lt;code&gt;git config -l&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="https://starwill.github.io/tags/GitHub/"/>
    
      <category term="Git" scheme="https://starwill.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="https://starwill.github.io/2016/12/26/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://starwill.github.io/2016/12/26/markdown语法/</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2017-03-01T10:55:05.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p><img src="http://oi63esxp7.bkt.clouddn.com/1.jpg" alt=""><br><a id="more"></a></p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p> <img src="http://oi63esxp7.bkt.clouddn.com/ni.jpg" alt=""></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>使用尖括号&gt;<br><img src="http://oi63esxp7.bkt.clouddn.com/3.jpg" alt=""></p>
<h3 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h3><p>区别在于是否有感叹号<br><img src="http://oi63esxp7.bkt.clouddn.com/4.jpg" alt=""></p>
<h3 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h3><p>用两个 * 包含的是粗体用法，也就是(&lowast;&lowast;)  </p>
<p><strong>这里是粗体</strong>   <em>这里是斜体</em>  </p>
<h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p><img src="http://oi63esxp7.bkt.clouddn.com/7.PNG" alt=""><br>或者直接用 ``将代码区域包含起来即可  </p>
<p><img src="http://oi63esxp7.bkt.clouddn.com/5.jpg" alt=""></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>直接输入table会跳出如下<br><img src="http://oi63esxp7.bkt.clouddn.com/8.PNG" alt=""><br>显示如下：  </p>
<table>
<thead>
<tr>
<th style="text-align:left">Header One</th>
<th style="text-align:left">Header Two</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Item One</td>
<td style="text-align:left">Item Two</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oi63esxp7.bkt.clouddn.com/1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="https://starwill.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
